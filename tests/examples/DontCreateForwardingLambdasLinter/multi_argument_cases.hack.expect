[
    {
        "blame": "  ($x, $y) ==> f($x, $y)",
        "blame_pretty": "  ($x, $y) ==> f($x, $y)",
        "description": "You have made a lambda which forwards all its arguments to a static method or function.\nThe order of the parameters is the same as the order of the arguments.\nYou could create a function reference instead. -> f<>"
    },
    {
        "blame": "  ($x, $y) ==> $f($x, $y)",
        "blame_pretty": "  ($x, $y) ==> $f($x, $y)",
        "description": "You have made a lambda which forwards all its arguments to a callable held in a variable.\nThe order of the parameters is the same as the order of the arguments.\nYou could use the variable instead of the lambda. -> $f"
    },
    {
        "blame": "  ($x, $y) ==> C\\f($x, $y)",
        "blame_pretty": "  ($x, $y) ==> C\\f($x, $y)",
        "description": "You have made a lambda which forwards all its arguments to a static method or function.\nThe order of the parameters is the same as the order of the arguments.\nYou could create a function reference instead. -> C\\f<>"
    },
    {
        "blame": "  ($x, $y) ==> C::f($x, $y)",
        "blame_pretty": "  ($x, $y) ==> C::f($x, $y)",
        "description": "You have made a lambda which forwards all its arguments to a static method or function.\nThe order of the parameters is the same as the order of the arguments.\nYou could create a function reference instead. -> C::f<>"
    },
    {
        "blame": "  ($x, $y) ==> C\\C::f($x, $y)",
        "blame_pretty": "  ($x, $y) ==> C\\C::f($x, $y)",
        "description": "You have made a lambda which forwards all its arguments to a static method or function.\nThe order of the parameters is the same as the order of the arguments.\nYou could create a function reference instead. -> C\\C::f<>"
    }
]
