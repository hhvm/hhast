[
    {
        "blame": "  async ($x, ...$y) ==> await f($x, ...$y)",
        "blame_pretty": "  async ($x, ...$y) ==> await f($x, ...$y)",
        "description": "You have made a lambda which forwards all its arguments to a static method or function.\nThe order of the parameters is the same as the order of the arguments.\nYou could create a function reference instead. -> f<>\n\nIMPORTANT NOTE EXTRA ATTENTION REQUIRED!\nAn async lambda implcitly creates wrapping Awaitables when called.\nAwaitables hold their exceptions until they are joined or awaited.\nRemoving the lambda may change where \/ when exceptions are thrown.\nThis does not apply if callable after the await is declared async."
    },
    {
        "blame": "  async ($x, ...$y) ==> await $f($x, ...$y)",
        "blame_pretty": "  async ($x, ...$y) ==> await $f($x, ...$y)",
        "description": "You have made a lambda which forwards all its arguments to a callable held in a variable.\nThe order of the parameters is the same as the order of the arguments.\nYou could use the variable instead of the lambda. -> $f\n\nIMPORTANT NOTE EXTRA ATTENTION REQUIRED!\nAn async lambda implcitly creates wrapping Awaitables when called.\nAwaitables hold their exceptions until they are joined or awaited.\nRemoving the lambda may change where \/ when exceptions are thrown.\nThis does not apply if callable after the await is declared async."
    },
    {
        "blame": "  async ($x, ...$y) ==> await C\\f($x, ...$y)",
        "blame_pretty": "  async ($x, ...$y) ==> await C\\f($x, ...$y)",
        "description": "You have made a lambda which forwards all its arguments to a static method or function.\nThe order of the parameters is the same as the order of the arguments.\nYou could create a function reference instead. -> C\\f<>\n\nIMPORTANT NOTE EXTRA ATTENTION REQUIRED!\nAn async lambda implcitly creates wrapping Awaitables when called.\nAwaitables hold their exceptions until they are joined or awaited.\nRemoving the lambda may change where \/ when exceptions are thrown.\nThis does not apply if callable after the await is declared async."
    },
    {
        "blame": "  async ($x, ...$y) ==> await C::f($x, ...$y)",
        "blame_pretty": "  async ($x, ...$y) ==> await C::f($x, ...$y)",
        "description": "You have made a lambda which forwards all its arguments to a static method or function.\nThe order of the parameters is the same as the order of the arguments.\nYou could create a function reference instead. -> C::f<>\n\nIMPORTANT NOTE EXTRA ATTENTION REQUIRED!\nAn async lambda implcitly creates wrapping Awaitables when called.\nAwaitables hold their exceptions until they are joined or awaited.\nRemoving the lambda may change where \/ when exceptions are thrown.\nThis does not apply if callable after the await is declared async."
    },
    {
        "blame": "  async ($x, ...$y) ==> await C\\C::f($x, ...$y)",
        "blame_pretty": "  async ($x, ...$y) ==> await C\\C::f($x, ...$y)",
        "description": "You have made a lambda which forwards all its arguments to a static method or function.\nThe order of the parameters is the same as the order of the arguments.\nYou could create a function reference instead. -> C\\C::f<>\n\nIMPORTANT NOTE EXTRA ATTENTION REQUIRED!\nAn async lambda implcitly creates wrapping Awaitables when called.\nAwaitables hold their exceptions until they are joined or awaited.\nRemoving the lambda may change where \/ when exceptions are thrown.\nThis does not apply if callable after the await is declared async."
    }
]
