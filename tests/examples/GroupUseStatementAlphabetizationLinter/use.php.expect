[
    {
        "blame": "\/*\n *  Copyright (c) 2017-present, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the MIT license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *\/\n\nuse type Facebook\\HHAST\\{BinaryToken, AwaitToken, AsyncToken};\n",
        "blame_pretty": "\/*\n *  Copyright (c) 2017-present, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the MIT license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *\/\n\nuse type Facebook\\HHAST\\{BinaryToken, AwaitToken, AsyncToken};\n",
        "description": "Group use statements should be sorted alphabetically"
    },
    {
        "blame": "use type Facebook\\HHAST\\{\n  ElseToken,\n  DefaultToken,\n  BreakToken,\n  FinalToken,\n  CaseToken,\n};\n",
        "blame_pretty": "use type Facebook\\HHAST\\{\n  ElseToken,\n  DefaultToken,\n  BreakToken,\n  FinalToken,\n  CaseToken,\n};\n",
        "description": "Group use statements should be sorted alphabetically"
    },
    {
        "blame": "\nuse type Facebook\\HHAST\\{EnumToken, ForToken \/*trailing*\/, CatchToken};\n",
        "blame_pretty": "\nuse type Facebook\\HHAST\\{EnumToken, ForToken \/*trailing*\/, CatchToken};\n",
        "description": "Group use statements should be sorted alphabetically"
    },
    {
        "blame": "use type Facebook\\HHAST\\{\n  \/*leading*\/ StaticToken \/*trailing before comma*\/,\n  MinusEqualToken,\n  PublicToken, \/\/ trailing after comma\n  GreaterThanEqualToken,\n  IfToken,\n};\n",
        "blame_pretty": "use type Facebook\\HHAST\\{\n  \/*leading*\/ StaticToken \/*trailing before comma*\/,\n  MinusEqualToken,\n  PublicToken, \/\/ trailing after comma\n  GreaterThanEqualToken,\n  IfToken,\n};\n",
        "description": "Group use statements should be sorted alphabetically"
    },
    {
        "blame": "\nuse type Facebook\\{HHAST\\LessThanEqualToken, HHAST\\FloatToken};\n",
        "blame_pretty": "\nuse type Facebook\\{HHAST\\LessThanEqualToken, HHAST\\FloatToken};\n",
        "description": "Group use statements should be sorted alphabetically"
    },
    {
        "blame": "\nuse type Foo\\Bar\\{\n  FooBar,\n  Foo,\n};\n",
        "blame_pretty": "\nuse type Foo\\Bar\\{\n  FooBar,\n  Foo,\n};\n",
        "description": "Group use statements should be sorted alphabetically"
    },
    {
        "blame": "\nuse type Foo\\Bar\\{\n  BBB as YYY,\n  AAA as ZZZ,\n};\n",
        "blame_pretty": "\nuse type Foo\\Bar\\{\n  BBB as YYY,\n  AAA as ZZZ,\n};\n",
        "description": "Group use statements should be sorted alphabetically"
    },
    {
        "blame": "\nuse type Facebook\\Markdown\\Blocks\\{\n  TableExtensionColumnAlignment as ColumnAlignment,\n  TableExtension as ASTTableExtension,\n};\n",
        "blame_pretty": "\nuse type Facebook\\Markdown\\Blocks\\{\n  TableExtensionColumnAlignment as ColumnAlignment,\n  TableExtension as ASTTableExtension,\n};\n",
        "description": "Group use statements should be sorted alphabetically"
    }
]
