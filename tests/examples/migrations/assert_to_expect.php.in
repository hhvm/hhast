<?hh //strict

use namespace hi;
use function hello;
use type that;

class Test {

  public function testMethod(): void {
    self::assertSame($a, $a);
    self::assertEquals($a, $b);
    self::assertEquals($a, $b, 'msg');
    self::assertEquals($a, $b, 'msg', $delta);
    self::assertNull($obj);
    self::assertTrue('foo', 'msg');
    self::assertFalse(vec[1, 2, 3]);
    self::assertInstanceOf(HackTestCase::class, $obj, 'Not an instance of HackTestCase!');
    self::assertGreaterThanOrEqualTo(1, 2, '2 > 1');
    assertSame($a, $a);
    assertEquals($a, $b);
    assertEquals($a, $b, 'msg');
    assertEquals($a, $b, 'msg', $delta);
    assertNull($obj);
    assertTrue('foo', 'msg');
    assertFalse(vec[1, 2, 3]);
    assertInstanceOf(HackTestCase::class, $obj, 'Not an instance of HackTestCase!');
    assertGreaterThanOrEqualTo(1, 2, '2 > 1');
    $this->assertSame($a, $a);
    $this->assertEquals($a, $b);
    $this->assertEquals($a, $b, 'msg');
    $this->assertEquals($a, $b, 'msg', $delta);
    $this->assertNull($obj);
    $this->assertTrue('foo', 'msg');
    $this->assertFalse(vec[1, 2, 3]);
    $this->assertInstanceOf(HackTestCase::class, $obj, 'Not an instance of HackTestCase!');
    $this->assertGreaterThanOrEqualTo(1, 2, '2 > 1');
    $this->foo->assertType('not a PHPUnit Assertion');
  }
}
