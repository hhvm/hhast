<?hh // strict

/**
 * Copyright (c) 2016, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional
 * grant of patent rights can be found in the PATENTS file in the same
 * directory.
 *
 */

namespace MyNamespace {

use function preg_match as analbumcover;
use function \preg_match_all as catchthesemen;

function foo(): void {
  $matches = null;

  \preg_match('/foo/', 'bar');
  \preg_match_all('/foo/', 'bar');

  \preg_match_with_matches('/foo/', 'bar', inout $matches);
  \preg_match_all_with_matches('/foo/', 'bar', inout $matches);

  \preg_match_with_matches('/foo/', 'bar', inout $matches);
  \preg_match_all_with_matches('/foo/', 'bar', inout $matches);

  \preg_match_with_matches('/foo/', 'bar', inout $matches, \PREG_UNMATCHED_AS_NULL, 42);
  \preg_match_all_with_matches(
    '/foo/',
    'bar',
    inout $matches,
    \PREG_SET_ORDER | \PREG_OFFSET_CAPTURE,
  );

  if (\preg_match_with_matches('/foo/', 'bar', inout $matches)) {
    return;
  }

  \preg_match_with_matches /* ...but trivia at the end is preserved. */ (
    '/foo/',
    'bar',
    inout/* no space here */$matches,
  );

  // Aliased.
  \preg_match_with_matches('/foo/', 'bar', inout $matches);
  \preg_match_all_with_matches('/foo/', 'bar', inout $matches);

  // Not in the root namespace.
  preg_match('/foo/', 'bar', &$matches);
  MyNamespace\preg_match_all('/foo/', 'bar', &$matches);

  // Some other functions.
  \current_ref(inout $arr);
  \key_ref(inout $arr);

  // By-ref to inout without renaming.
  \reset(inout $arr);

  $out = null;
  \preg_replace_callback('/([a-z])/', fun('Str\\uppercase'), $str, -1, inout $out);

  // Missing arguments after migration from optional by-ref to required inout.
  $__unused_inout = null;
  \preg_replace_callback('/([a-z])/', fun('Str\\uppercase'), $str, -1, inout $__unused_inout);

  $__unused_inout = null;
  \preg_replace_callback(
    '/([a-z])/',
    fun('Str\\uppercase'),
    $str,
    -1,
    inout $__unused_inout,
  );

  // Edge cases (non-standard formatting, comments inside, etc.)
  $__unused_inout = null;
  \preg_replace_callback('/foo/','bar',$str,-1,inout $__unused_inout);
  $__unused_inout = null;
  \preg_replace_callback('/foo/', 'bar', $str, -1, inout $__unused_inout,);
  $__unused_inout = null;
  \preg_replace_callback('/foo/', 'bar', $str, -1, inout $__unused_inout, );
  $__unused_inout = null;
  \preg_replace_callback('/foo/', 'bar', $str, /* hi */ -1, inout $__unused_inout);
  $__unused_inout = null;
  \preg_replace_callback('/foo/', 'bar', $str, /* hi */ -1, inout $__unused_inout );
  $__unused_inout = null;
  \preg_replace_callback('/foo/', 'bar', $str, /* hi */ -1, inout $__unused_inout,);
  $__unused_inout = null;
  \preg_replace_callback('/foo/', 'bar', $str, /* hi */ -1, inout $__unused_inout, );
  $__unused_inout = null;
  \preg_replace_callback('/foo/', 'bar', /* hi */$str, -1, inout $__unused_inout);
  $__unused_inout = null;
  \preg_replace_callback(
    '/foo/', 'bar', $str, -1, inout $__unused_inout,
  );
  $__unused_inout = null;
  \preg_replace_callback(
    '/foo/',
    'bar',
    $str,
    -1,
    inout $__unused_inout
  );
  $__unused_inout = null;
  \preg_replace_callback(
    '/foo/',
    'bar',
    $str,  // hello
    -1,
    inout $__unused_inout
  );
  $__unused_inout = null;
  \preg_replace_callback(
    '/foo/',
    'bar',
    $str,  // hello
    -1,
    inout $__unused_inout,
  );
  $__unused_inout = null;
  \preg_replace_callback(
    '/foo/',
    'bar',
    $str,
    -1,
    inout $__unused_inout);
  $__unused_inout = null;
  \preg_replace_callback(
    '/foo/',
    'bar',
    $str,
    -1,
    inout $__unused_inout, );
  $__unused_inout = null;
  \preg_replace_callback(
    '/foo/',
    'bar',
    // hello
    $str,
    -1,
    inout $__unused_inout,
  );
  $__unused_inout = null;
  \preg_replace_callback(
    '/foo/',
    'bar',
    /* hi */ $str,
    -1,
    inout $__unused_inout,
  );
  $__unused_inout = null;
  \preg_replace_callback(
    /* hi */ '/foo/',  // hello
    /* hi */ 'bar',  // hello
    /* hi */ $str,  // hello
    -1,
    inout $__unused_inout,
  );
  $__unused_inout = null;
  \preg_replace_callback(

    /* hi */ '/foo/',  // hello

    /* hi */ 'bar',  // hello

    /* hi */ $str,  // hello
    -1,
    inout $__unused_inout,

  );

  // Inside a complicated statement.
  while (true) {
    do {
      $__unused_inout = null;
      $__unused_inout = null;
      $_ = true
        ? \preg_replace_callback('/foo/', 'bar', $str, -1, inout $__unused_inout)
        : \preg_replace_callback('/foo/', 'bar', $str, -1, inout $__unused_inout);
    } while (false);
  }

  // Fun edge case: Braceless if.
  $__unused_inout = null;
  if (true)
    \preg_replace_callback('/foo/', 'bar', $str, -1, inout $__unused_inout);

  // Compund statement with non-standard formatting.
  for (;;) { $__unused_inout = null; \preg_replace_callback('/foo/', 'bar', $str, -1, inout $__unused_inout); }
}

} // end of MyNamespace


function bar(): void {
  $matches = null;
  \preg_match_with_matches('/foo/', 'bar', inout $matches);
}
