<?hh // strict

use namespace HH\Lib\{Str, Dict, Math, C};

<<__EntryPoint>>
function hsl_migration_main(): void {
  require(__DIR__.'/../../../vendor/autoload.hack');
  Facebook\AutoloadMap\initialize();

  echo "\nucwords: ".Str\capitalize_words('hello world');
  echo "\nucfirst: ".Str\capitalize("hello");
  echo "\nstrtolower: ".Str\lowercase("HELLO");
  echo "\nstrtoupper: ".Str\uppercase("hello");
  // argument reordering with no trailing comma
  echo "\nstr_replace: ".Str\replace('foobarbaz', 'foo', 'bar');
  // argument reordering with no trailing comma
  echo "\nstr_replace: ".Str\replace('foobarbaz', 'foo', 'bar',);
  echo "\nstr_replace: ".
    Str\replace_every('a test example with arrays', Dict\associate(varray['a', 'b'], varray['x', 'y']));
  echo "\nstr_ireplace: ".Str\replace_ci('foobarbaz', 'foo', 'bar');
  // this case is also not handled because there is no case insensitive version of Str\replace_every
  echo "\nstr_ireplace: ".
    str_ireplace(varray['a', 'b'], varray['x', 'y'], 'a test example with arrays');
  echo "\nstrpos: ".Str\search('haystack', 'stack');
  echo "\nstrpos: ".Str\search('haystack', 'stack', 3);

  if (Str\search('haystack', 'stack') === null) {
    echo "\nneedle is not in haystack";
  }
  $pos = Str\search('haystack', 'stack');
  if ($pos === false) {
    echo "\nneedle is not in haystack";
  }

  echo "\nstrrpos: ".Str\search_last('haystack', 'stack');
  echo "\nstripos: ".Str\search_ci('haystack', 'stack');

  // implode accepts args in either order
  echo "\nimplode: ".json_encode(Str\join(varray['a', 'b', 'c'], ','));
  echo "\nimplode: ".json_encode(Str\join(varray['a', 'b', 'c'], ','));

  // test with explicit namespace fallback
  echo "\nimplode: ".json_encode(Str\join(varray['a', 'b', 'c'], ','));

  $glue = ',';
  $pieces = varray['a', 'b', 'c'];
  echo "\nimplode: ".json_encode(Str\join($pieces, $glue));
  echo "\nimplode: ".json_encode(Str\join($pieces, $glue));

  echo "\join: ".json_encode(Str\join($pieces, $glue));

  echo "\nsubstr_replace: ".Str\splice('foo', 'b', 0);
  echo "\nsubstr_replace: ".Str\splice('foo', 'b', 0, 1);
  echo "\nsubstr_replace: ".Str\splice('foo', 'b', -1, 1);
  // this case is not handled in HSL (negative length on Str\splice throws exception)
  echo "\nsubstr_replace: ".substr_replace('foo', 'b', -1, -1);

  echo "\nsubstr: ".Str\slice('foo', 2);
  echo "\nsubstr: ".Str\slice('foo', 1, 2);
  echo "\nsubstr: ".Str\slice('foo', 1, Str\length('foo') - 2);
  echo "\nsubstr: ".Str\slice('foo', -2, 1);
  echo "\nsubstr: ".Str\slice("abcdef", 0, Str\length("abcdef") - 1);
  echo "\nsubstr: ".Str\slice("abcdef", 2, Str\length("abcdef") - 3);
  echo "\nsubstr: ".Str\slice("abcdef", -3, 2);

  echo "\nstr_repeat: ".Str\repeat('x', 5);

  echo "\ntrim: ".Str\trim('test ');
  echo "\ntrim: ".Str\trim('test ', ' ');

  echo "\nltrim: ".Str\trim_left('test ');
  echo "\nltrim: ".Str\trim_left('test ', 't');

  echo "\nrtrim: ".Str\trim_right('test ');
  echo "\nrtrim: ".Str\trim_right('test ', ' ');

  echo "\nstrlen: ".Str\length('foo');

  echo "\nsprintf: ".Str\format('%s', 'foo');
  echo "\nsprintf: ".Str\format('%s %s', 'foo', 'bar');

  echo "\nstr_split: ".json_encode(Str\chunk('foobarbaz', 3));

  echo "\nstrcmp: ".Str\compare('test', 'test');

  echo "\nstrcasecmp: ".Str\compare_ci('test', 'TEST');

  echo "\nnumber_format: ".Str\format_number(123456.789);
  echo "\nnumber_format: ".Str\format_number(123456.789, 2);
  echo "\nnumber_format: ".Str\format_number(123456.789, 2, ',', '.');

  echo "\nnumber_format: ".Str\format_number(123456.789, 2, ',', '.');

  echo "\nround: ".Math\round(3.14159);
  echo "\nround: ".Math\round(3.14159, 2);
  // this case is not handled in HSL (third argument can not be specified)
  echo "\nround: ".round(3.14159, 2, PHP_ROUND_HALF_DOWN);

  echo "\nceil: ".Math\ceil(3.14);

  echo "\nfloor: ".Math\floor(3.14);

  echo "\narray_sum: ".Math\sum(varray[1, 2, 3]);

  echo "\nintdiv: ".Math\int_div(2, 5);

  echo "\nexp: ".Math\exp(5.7);

  echo "\nabs: ".Math\abs(-1);

  echo "\nbase_convert: ".Math\base_convert('a37334', 16, 2);

  echo "\nmax: ".Math\maxva(1, 2, 3);
  echo "\nmax: ".Math\max(varray[1, 2, 3]);

  echo "\nmin: ".Math\minva(1, 2, 3);
  echo "\nmin: ".Math\min(varray[1, 2, 3]);

  echo "\ncos: ".Math\cos(1.0);

  echo "\nsin: ".Math\sin(1.0);

  echo "\ntan: ".Math\tan(1.0);

  echo "\nsqrt: ".Math\sqrt(4.0);

  echo "\nlog: ".Math\log(5.0);
  echo "\nlog: ".Math\log(5.0, 2.0);

  echo "\ncount: " .C\count(varray[1, 2, 3]);
}
