namespace Facebook\HHAST\_Private\NoNameCollisionPlz\LegacyArrayTypesToHackArrayTypesMigration;

// Ignoring hackfmt because I want to add test with the uncommon trailing comma.

//hackfmt-ignore `vec<vec<int,>,>`
type TNestedVec = /*1*/vec/*2*/</*3*/vec/*4*/</*5*/int/*6*//*7*/>/*8*//*9*/>/*a*/;

//hackfmt-ignore `dict<int, dict<int, int,>,>`
type TNestedDict = /*1*/dict/*2*/</*3*/int/*4*/,/*5*/dict/*6*/</*7*/int/*8*/,/*9*/int/*a*/,/*b*/>/*c*/,/*d*/>/*e*/;

// hackfmt-ignore
type TCompoundInnerType = vec<shape('a' => int),>;

// hackfmt-ignore
type TGenericType = dict<classname<nonnull>, classname<mixed>,>;

type TWithoutTrailingComma = vec<dict<int, vec<string>>>;

abstract class InExtends<T> {}

function type_spec_of<reify T>(): void {}

abstract class InOtherContexts extends InExtends<dict<int, vec<string>>> {

  const type TClassTypeConstant = dict<int, vec<string>>;
  abstract public function paramType(dict<int, vec<string>> $d): void;
  abstract public function returnType(): dict<int, vec<string>>;
  abstract public function inAs<T as dict<int, vec<string>>>(): void;
  abstract public function inWhere<T>(): void
  where
    T = dict<int, vec<string>>;
  public function inTypeSpecOf(): void {
    $spec = type_spec_of<dict<int, vec<string>>>();
  }
}
