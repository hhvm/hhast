<?hh // strict
/**
 * This file is generated. Do not modify it manually!
 *
 * @generated SignedSource<<d697924380e9db5ad178e3228375d09f>>
 */
namespace Facebook\HHAST\__Private;
use namespace Facebook\HHAST;

function editable_token_from_data(
  string $file,
  int $offset,
  string $token_kind,
  HHAST\EditableNode $leading,
  HHAST\EditableNode $trailing,
  string $token_text,
): HHAST\EditableToken {
  static $class_map_with_text = dict[
    'abstract' => HHAST\AbstractToken::class,
    'and' => HHAST\AndToken::class,
    'array' => HHAST\ArrayToken::class,
    'arraykey' => HHAST\ArraykeyToken::class,
    'as' => HHAST\AsToken::class,
    'async' => HHAST\AsyncToken::class,
    'attribute' => HHAST\AttributeToken::class,
    'await' => HHAST\AwaitToken::class,
    'bool' => HHAST\BoolToken::class,
    'break' => HHAST\BreakToken::class,
    'case' => HHAST\CaseToken::class,
    'catch' => HHAST\CatchToken::class,
    'category' => HHAST\CategoryToken::class,
    'children' => HHAST\ChildrenToken::class,
    'class' => HHAST\ClassToken::class,
    'classname' => HHAST\ClassnameToken::class,
    'clone' => HHAST\CloneToken::class,
    'const' => HHAST\ConstToken::class,
    '__construct' => HHAST\ConstructToken::class,
    'continue' => HHAST\ContinueToken::class,
    'coroutine' => HHAST\CoroutineToken::class,
    'darray' => HHAST\DarrayToken::class,
    'default' => HHAST\DefaultToken::class,
    'define' => HHAST\DefineToken::class,
    '__destruct' => HHAST\DestructToken::class,
    'dict' => HHAST\DictToken::class,
    'do' => HHAST\DoToken::class,
    'double' => HHAST\DoubleToken::class,
    'echo' => HHAST\EchoToken::class,
    'else' => HHAST\ElseToken::class,
    'elseif' => HHAST\ElseifToken::class,
    'empty' => HHAST\EmptyToken::class,
    'enum' => HHAST\EnumToken::class,
    'eval' => HHAST\EvalToken::class,
    'extends' => HHAST\ExtendsToken::class,
    'fallthrough' => HHAST\FallthroughToken::class,
    'float' => HHAST\FloatToken::class,
    'final' => HHAST\FinalToken::class,
    'finally' => HHAST\FinallyToken::class,
    'for' => HHAST\ForToken::class,
    'foreach' => HHAST\ForeachToken::class,
    'function' => HHAST\FunctionToken::class,
    'global' => HHAST\GlobalToken::class,
    'goto' => HHAST\GotoToken::class,
    'if' => HHAST\IfToken::class,
    'implements' => HHAST\ImplementsToken::class,
    'include' => HHAST\IncludeToken::class,
    'include_once' => HHAST\Include_onceToken::class,
    'instanceof' => HHAST\InstanceofToken::class,
    'insteadof' => HHAST\InsteadofToken::class,
    'int' => HHAST\IntToken::class,
    'interface' => HHAST\InterfaceToken::class,
    'isset' => HHAST\IssetToken::class,
    'keyset' => HHAST\KeysetToken::class,
    'list' => HHAST\ListToken::class,
    'mixed' => HHAST\MixedToken::class,
    'namespace' => HHAST\NamespaceToken::class,
    'new' => HHAST\NewToken::class,
    'newtype' => HHAST\NewtypeToken::class,
    'noreturn' => HHAST\NoreturnToken::class,
    'num' => HHAST\NumToken::class,
    'object' => HHAST\ObjectToken::class,
    'or' => HHAST\OrToken::class,
    'parent' => HHAST\ParentToken::class,
    'print' => HHAST\PrintToken::class,
    'private' => HHAST\PrivateToken::class,
    'protected' => HHAST\ProtectedToken::class,
    'public' => HHAST\PublicToken::class,
    'require' => HHAST\RequireToken::class,
    'require_once' => HHAST\Require_onceToken::class,
    'required' => HHAST\RequiredToken::class,
    'resource' => HHAST\ResourceToken::class,
    'return' => HHAST\ReturnToken::class,
    'self' => HHAST\SelfToken::class,
    'shape' => HHAST\ShapeToken::class,
    'static' => HHAST\StaticToken::class,
    'string' => HHAST\StringToken::class,
    'super' => HHAST\SuperToken::class,
    'suspend' => HHAST\SuspendToken::class,
    'switch' => HHAST\SwitchToken::class,
    'this' => HHAST\ThisToken::class,
    'throw' => HHAST\ThrowToken::class,
    'trait' => HHAST\TraitToken::class,
    'try' => HHAST\TryToken::class,
    'tuple' => HHAST\TupleToken::class,
    'type' => HHAST\TypeToken::class,
    'unset' => HHAST\UnsetToken::class,
    'use' => HHAST\UseToken::class,
    'var' => HHAST\VarToken::class,
    'varray' => HHAST\VarrayToken::class,
    'vec' => HHAST\VecToken::class,
    'void' => HHAST\VoidToken::class,
    'where' => HHAST\WhereToken::class,
    'while' => HHAST\WhileToken::class,
    'xor' => HHAST\XorToken::class,
    'yield' => HHAST\YieldToken::class,
    'null' => HHAST\NullLiteralToken::class,
    'error_token' => HHAST\ErrorTokenToken::class,
    'name' => HHAST\NameToken::class,
    'qualified_name' => HHAST\QualifiedNameToken::class,
    'variable' => HHAST\VariableToken::class,
    'namespace_prefix' => HHAST\NamespacePrefixToken::class,
    'decimal_literal' => HHAST\DecimalLiteralToken::class,
    'octal_literal' => HHAST\OctalLiteralToken::class,
    'hexadecimal_literal' => HHAST\HexadecimalLiteralToken::class,
    'binary_literal' => HHAST\BinaryLiteralToken::class,
    'floating_literal' => HHAST\FloatingLiteralToken::class,
    'execution_string' => HHAST\ExecutionStringToken::class,
    'single_quoted_string_literal' =>
      HHAST\SingleQuotedStringLiteralToken::class,
    'double_quoted_string_literal' =>
      HHAST\DoubleQuotedStringLiteralToken::class,
    'double_quoted_string_literal_head' =>
      HHAST\DoubleQuotedStringLiteralHeadToken::class,
    'string_literal_body' => HHAST\StringLiteralBodyToken::class,
    'double_quoted_string_literal_tail' =>
      HHAST\DoubleQuotedStringLiteralTailToken::class,
    'heredoc_string_literal' => HHAST\HeredocStringLiteralToken::class,
    'heredoc_string_literal_head' => HHAST\HeredocStringLiteralHeadToken::class,
    'heredoc_string_literal_tail' => HHAST\HeredocStringLiteralTailToken::class,
    'nowdoc_string_literal' => HHAST\NowdocStringLiteralToken::class,
    'boolean_literal' => HHAST\BooleanLiteralToken::class,
    'XHP_category_name' => HHAST\XHPCategoryNameToken::class,
    'XHP_element_name' => HHAST\XHPElementNameToken::class,
    'XHP_class_name' => HHAST\XHPClassNameToken::class,
    'XHP_string_literal' => HHAST\XHPStringLiteralToken::class,
    'XHP_body' => HHAST\XHPBodyToken::class,
    'XHP_comment' => HHAST\XHPCommentToken::class,
    'markup' => HHAST\MarkupToken::class,
  ];
  static $class_map = dict[
    'end_of_file' => HHAST\EndOfFileToken::class,
    '[' => HHAST\LeftBracketToken::class,
    ']' => HHAST\RightBracketToken::class,
    '(' => HHAST\LeftParenToken::class,
    ')' => HHAST\RightParenToken::class,
    '{' => HHAST\LeftBraceToken::class,
    '}' => HHAST\RightBraceToken::class,
    '.' => HHAST\DotToken::class,
    '->' => HHAST\MinusGreaterThanToken::class,
    '++' => HHAST\PlusPlusToken::class,
    '--' => HHAST\MinusMinusToken::class,
    '**' => HHAST\StarStarToken::class,
    '*' => HHAST\StarToken::class,
    '+' => HHAST\PlusToken::class,
    '-' => HHAST\MinusToken::class,
    '~' => HHAST\TildeToken::class,
    '!' => HHAST\ExclamationToken::class,
    '$' => HHAST\DollarToken::class,
    '/' => HHAST\SlashToken::class,
    '%' => HHAST\PercentToken::class,
    '<>' => HHAST\LessThanGreaterThanToken::class,
    '<=>' => HHAST\LessThanEqualGreaterThanToken::class,
    '<<' => HHAST\LessThanLessThanToken::class,
    '>>' => HHAST\GreaterThanGreaterThanToken::class,
    '<' => HHAST\LessThanToken::class,
    '>' => HHAST\GreaterThanToken::class,
    '<=' => HHAST\LessThanEqualToken::class,
    '>=' => HHAST\GreaterThanEqualToken::class,
    '==' => HHAST\EqualEqualToken::class,
    '===' => HHAST\EqualEqualEqualToken::class,
    '!=' => HHAST\ExclamationEqualToken::class,
    '!==' => HHAST\ExclamationEqualEqualToken::class,
    '^' => HHAST\CaratToken::class,
    '|' => HHAST\BarToken::class,
    '&' => HHAST\AmpersandToken::class,
    '&&' => HHAST\AmpersandAmpersandToken::class,
    '||' => HHAST\BarBarToken::class,
    '?' => HHAST\QuestionToken::class,
    '??' => HHAST\QuestionQuestionToken::class,
    ':' => HHAST\ColonToken::class,
    ';' => HHAST\SemicolonToken::class,
    '=' => HHAST\EqualToken::class,
    '**=' => HHAST\StarStarEqualToken::class,
    '*=' => HHAST\StarEqualToken::class,
    '/=' => HHAST\SlashEqualToken::class,
    '%=' => HHAST\PercentEqualToken::class,
    '+=' => HHAST\PlusEqualToken::class,
    '-=' => HHAST\MinusEqualToken::class,
    '.=' => HHAST\DotEqualToken::class,
    '<<=' => HHAST\LessThanLessThanEqualToken::class,
    '>>=' => HHAST\GreaterThanGreaterThanEqualToken::class,
    '&=' => HHAST\AmpersandEqualToken::class,
    '^=' => HHAST\CaratEqualToken::class,
    '|=' => HHAST\BarEqualToken::class,
    ',' => HHAST\CommaToken::class,
    '@' => HHAST\AtToken::class,
    '::' => HHAST\ColonColonToken::class,
    '=>' => HHAST\EqualGreaterThanToken::class,
    '==>' => HHAST\EqualEqualGreaterThanToken::class,
    '?->' => HHAST\QuestionMinusGreaterThanToken::class,
    '...' => HHAST\DotDotDotToken::class,
    '$$' => HHAST\DollarDollarToken::class,
    '|>' => HHAST\BarGreaterThanToken::class,
    '/>' => HHAST\SlashGreaterThanToken::class,
    '</' => HHAST\LessThanSlashToken::class,
    '<?' => HHAST\LessThanQuestionToken::class,
    '?>' => HHAST\QuestionGreaterThanToken::class,
  ];
  $cls = idx($class_map, $token_kind);
  if ($cls !== null) {
    return new $cls($leading, $trailing);
  }
  $cls = idx($class_map_with_text, $token_kind);
  if ($cls !== null) {
    return new $cls($leading, $trailing, $token_text);
  }
  throw new HHAST\UnsupportedTokenError($file, $offset, $token_kind);
}
