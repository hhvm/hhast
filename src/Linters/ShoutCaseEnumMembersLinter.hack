/*
 *  Copyright (c) 2017-present, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the MIT license found in the
 *  LICENSE file in the root directory of this source tree.
 *
 */

namespace Facebook\HHAST;

use namespace HH\Lib\{C, Dict, Regex, Str, Vec};

final class ShoutCaseEnumMembersLinter extends AutoFixingASTLinter {
  const type TContext = EnumDeclaration;
  const type TNode = Enumerator;

  <<__Override>>
  public function getLintErrorForNode(
    self::TContext $enum,
    self::TNode $member,
  ): ?ASTLintError {
    $original_name = $this->memberToName($member);
    if ($this->isShoutCase($original_name)) {
      return null;
    }

    $transformed_names = $this->prepareAllNewNamesFor($enum);

    // If we can't find the shout name, we bail, because the enum
    // member names would not be unique after the fix.
    if (!C\contains_key($transformed_names, $original_name)) {
      return new ASTLintError(
        $this,
        Str\format(
          'Member {%s} is not in SHOUT_CASE,
but the autogenerated name collided, so no autofix is suggested.',
          $original_name,
        ),
        $member,
        null,
      );
    }

    return new ASTLintError(
      $this,
      Str\format('Member {%s} is not in SHOUT_CASE', $original_name),
      $member,
      () ==> $member->withName(
        $member->getName()
          ->withText($transformed_names[$original_name]),
      ),
    );
  }

  private function isShoutCase(string $member_name): bool {
    return Regex\matches($member_name, re"/^[A-Z0-9_]+$/");
  }

  private function memberToName(Enumerator $member): string {
    return $member->getName()->getLastTokenx()->getText();
  }

  /**
   * @return dict<originalName, ORIGINAL_NAME>
   */
  <<__Memoize>>
  private function prepareAllNewNamesFor(
    EnumDeclaration $enum,
  ): dict<string, string> {
    $old_names = Vec\map(
      $enum->getChildren()['enumerators']->toVec(),
      $member ==> $this->memberToName($member as Enumerator),
    );

    // Put all non-shout case names in front.
    // This way they will be overwritten if there is a shout case member
    // that has the same name as the suggested fix.
    $old_names = Vec\partition($old_names, $name ==> $this->isShoutCase($name))
      |> Vec\concat($$[1], $$[0]);

    return Dict\from_values(
      $old_names,
      $name ==> $this->transformToShoutCase($name),
    )
      |> Dict\flip($$);
  }

  private function transformToShoutCase(string $name): string {
    invariant(!Str\is_empty($name), 'Name must be at least one character');
    if (Str\contains($name, '_')) {
      // snake_case
      return Str\uppercase($name);
    } else {
      // camelCase
      return camel_case_to_snake_case($name)
        |> Str\uppercase($$);
    }
  }

  <<__Override>>
  protected function getTitleForFix(LintError $_): string {
    return 'Use shout case for enum members';
  }
}
